// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider                 = "typegraphql-prisma"
  emitTranspiledCode       = true
  useUncheckedScalarInputs = true
  output                   = "../prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  username   String    @unique
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  posts      Post[]
  imageUri   String?
  lastPosted DateTime?
  verified   Boolean   @default(false)
  /// @TypeGraphQL.omit(output: true)
  password   String
  comments   Comment[]
  star       Star[]
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String    @db.VarChar(255)
  content   String
  /// @TypeGraphQL.omit(output: false)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  points    Int       @default(0)
  comments  Comment[]
  star      Star[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  commenter   User     @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  commenterId Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
}

model Star {
  value  Int
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}
